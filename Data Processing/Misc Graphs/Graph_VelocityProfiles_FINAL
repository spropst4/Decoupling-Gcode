'''
Good tutorials:
https://towardsdatascience.com/making-publication-quality-figures-in-python-part-ii-line-plot-legends-colors-4430a5891706
'''
import numpy as np
# load packages
import matplotlib as mpl
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator,FormatStrFormatter,MaxNLocator
import matplotlib.cm as cm
import matplotlib.patches as mpatches
import matplotlib.lines as mlines
import matplotlib.colors as mcol
#import proplot as pplt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

## round to nearest interval
def round_to_multiple(n, multiple):
    result = multiple * round(n/multiple)
    if result <= round(n):
        result += multiple/2
    return result

# set default global settings
mpl.rcParams['pdf.fonttype'] = 42
mpl.rcParams['ps.fonttype'] = 42
mpl.rcParams['font.family'] = 'Arial'

SMALL_SIZE = 8
MEDIUM_SIZE = 10
BIGGER_SIZE = 12

mpl.rc('font', size=SMALL_SIZE)          # controls default text sizes
mpl.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title
mpl.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels
mpl.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
mpl.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels
mpl.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize
mpl.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title

# mpl.rcParams['axes.spines.right'] = False
# mpl.rcParams['axes.spines.top'] = False

# Functions
## Accel Time
def accel_time_linear(v_0, v_f, accel):
    from sympy import symbols, solve
    # v_0 = starting velocity
    # max_v = desired feedrate #mm/s
    # accel = acceleration/ramprate
    x = symbols('x')
    t = symbols('t')
    v = symbols('v')
    find_x = v_0 ** 2 + 2 * accel * x - v_f ** 2  # finds distance to steady state velocity
    sol_x = solve(find_x)
    for i in range(len(sol_x)):
        try:
            sol_x[i] >= 0
            x_steady = sol_x[i]
            # x_steady = round(x_steady, 10)
        except TypeError:
            print("error in value of x; it may be imaginary")

    find_t = v_0 + accel * t - v_f  # finds time to steady state velocity
    sol_t = solve(find_t)
    t_steady = sol_t[0]
    # t_steady = round(t_steady, 10)
    return x_steady, t_steady
def accel_time_S_curve(jerk_ratio, velocity_input, accel_input):
    '''
    https://math.stackexchange.com/questions/2232105/question-about-s-curve-acceleration-and-deceleration-control
    http://www.et.byu.edu/~ered/ME537/Notes/Ch5.pdf
    '''

    from sympy import symbols, solve

    t_accel = symbols('t_accel')

    # solve for t_m
    accel_max = accel_input/(1 - (jerk_ratio * 0.5))
    t_ratio_pos = jerk_ratio * t_accel / 2
    t_ratio_neg = t_accel - t_ratio_pos
    v1 = 0.5 * accel_max * t_ratio_pos
    v2 = (accel_max * t_ratio_neg - accel_max * t_ratio_pos)
    v3 = v1

    t_sol_accel = solve(v1 + v2 + v3 - velocity_input)
    t_accel = t_sol_accel[0]
    return float(t_accel)
def accel_time_Half_Sine(velocity_input, accel_input):
    '''
    https://math.stackexchange.com/questions/2232105/question-about-s-curve-acceleration-and-deceleration-control
    http://www.et.byu.edu/~ered/ME537/Notes/Ch5.pdf
    '''

    from sympy import symbols, solve
    import numpy as np
    t_accel = symbols('t_accel')
    accel_max = accel_input/0.637
    P = 2*t_accel
    B = 2*np.pi/P
    t = t_accel
    find_t_accel = -accel_max/B *np.cos(np.pi) + accel_max/B - velocity_input #-accel_max/B *(np.cos(B*t)) - velocity_input
    t_accel = solve(find_t_accel)[0]
    return float(t_accel)

## Velocity
def velocity_linear(t_total, t_accel, accel_input, velocity_input):
    time_range = list(np.linspace(0, t_total, num = 1000))
    vel_list = []
    for i in range(len(time_range)):
        t_current = time_range[i]
        if 0 <= t_current < t_accel:
            v_current = accel_input*t_current

        elif t_accel <= t_current < t_total - t_accel:
            v_current = velocity_input

        else:
            t_current_calc = t_current - (t_total - t_accel)
            v_current = velocity_input - accel_input*t_current_calc

        vel_list.append(v_current)
    return time_range, vel_list
def velocity_halfSine(t_total, t_accel, accel_input, velocity_input):
    '''
      avg value of half sine: https://www.electronics-tutorials.ws/accircuits/average-voltage.html
      accel_input = 0.637*accel_max

      A = accel =  A*sin(B(x + C)) + D
      A = Amplitude
      B = 2pi/period
      C = Phase shift left
      D = vertical shift

      v(t) = Integral(accel) = -A cos(Bx)/B + Constant

      '''

    time_range = list(np.linspace(0, t_total, num=1000))
    a_max = accel_input / 0.637
    Period = 2 * t_accel
    B = 2 * np.pi / Period

    vel_list = []
    for i in range(len(time_range)):
        t_current = time_range[i]

        if 0 <= t_current < t_accel:
            v_current = velocity_input/2 - a_max/B * np.cos(B*t_current)

        elif t_accel <= t_current < t_total - t_accel:
            v_current = velocity_input

        else:
            t_current_calc = t_current - (t_total - t_accel)
            v_current = velocity_input/2 + a_max / B * np.cos(B * t_current_calc)


        vel_list.append(v_current)

    return time_range, vel_list
def velocity_S_curve(t_total, t_accel, accel_input, velocity_input, jerk_ratio):
    '''
    '''

    time_range = list(np.linspace(0, t_total, num=10000))
    accel_max = accel_input / (1 - (jerk_ratio * 0.5))
    t_ratio_pos = jerk_ratio * t_accel / 2                      # final time in increasing accel region
    t_steady_accel = (1 - jerk_ratio) * t_accel + t_ratio_pos           # final time in steady accel region
    t_ratio_neg = t_accel - t_ratio_pos                         # final time in decreasing accel region

    vel_list = []
    for i in range(len(time_range)):
        t_current = time_range[i]

        if 0 <= t_current < t_accel:
            v_incr_final = 0.5 * (accel_max / t_ratio_pos) * t_ratio_pos ** 2
            v_steady_final = v_incr_final + accel_max * (t_steady_accel - t_ratio_pos)

            if 0 <= t_current < t_ratio_pos:
                v_current = 0.5*(accel_max/t_ratio_pos)*t_current**2

            elif t_ratio_pos <= t_current < t_steady_accel:
                t_current_calc = t_current - t_ratio_pos
                v_current = v_incr_final + accel_max*t_current_calc

            else:
                t_current_calc = t_current - t_steady_accel
                v_current = v_steady_final + (accel_max*t_current_calc - 0.5* (accel_max/t_ratio_pos)*t_current_calc**2)

        elif t_accel <= t_current < t_total - t_accel:
            v_current = velocity_input


        else:
            v_incr_final = velocity_input - 0.5 * (accel_max / t_ratio_pos) * t_ratio_pos ** 2
            v_steady_final = v_incr_final - accel_max * (((t_total - t_accel) + t_steady_accel) - (((t_total - t_accel) + t_ratio_pos)))

            if t_total - t_accel <= t_current < (t_total - t_accel) + t_ratio_pos:
                t_current_calc = t_current - (t_total - t_accel)
                v_current = velocity_input -  0.5 * (accel_max / t_ratio_pos) * t_current_calc ** 2

            elif (t_total - t_accel) + t_ratio_pos < t_current < (t_total - t_accel) + t_steady_accel:
                t_current_calc = t_current - ((t_total - t_accel) + t_ratio_pos)
                v_current = v_incr_final - accel_max * t_current_calc

            else:
                t_current_calc = t_current - ((t_total - t_accel) + t_steady_accel)
                v_current = v_steady_final - (accel_max * t_current_calc - 0.5 * (accel_max / t_ratio_pos) * t_current_calc ** 2)


        vel_list.append(v_current)

    return time_range, vel_list

## Accel
def accel_linear(accel_input, t_total, t_accel):
    time_range = list(np.linspace(0, t_total, num = 1000))

    accel_list = [0]
    t_list_total = [0]

    for i in range(len(time_range)):
        t_current = time_range[i]

        if 0 <= t_current < t_accel:
            accel_current = accel_input

        elif t_accel <= t_current < t_total-t_accel:
            accel_current = 0

        else:
            accel_current = -accel_input

        accel_list.append(accel_current)
        t_list_total.append(t_current)

    accel_list.append(0)
    t_list_total.append(t_total)

    return t_list_total, accel_list
def accel_halfSine(accel_input, t_total, t_accel):
    '''
    avg value of half sine: https://www.electronics-tutorials.ws/accircuits/average-voltage.html
    accel_input = 0.637*accel_max

    y = A*sin(B(x + C)) + D
    A = Amplitude
    B = 2pi/period
    C = Phase shift left
    D = vertical shift

    '''
    time_range = list(np.linspace(0, t_total, num=1000))

    t_list_total = []
    accel = []
    accel_max = accel_input / 0.637

    period = 2*t_accel
    B_const = (2*np.pi)/period

    for i in range(len(time_range)):
        t_current = time_range[i]
        if 0 <= t_current < t_accel:
            accel_current = accel_max*np.sin(B_const*t_current)
            if round(accel_current) == 0:
                accel_current = 0


        elif t_accel <= t_current < t_total-t_accel:
            accel_current = 0


        else:
            t_current_calc = t_current - (t_total - t_accel)
            accel_current = -accel_max * np.sin(B_const*t_current_calc)
            if round(accel_current) == 0:
                accel_current = 0

        accel.append(accel_current)
        t_list_total.append(t_current)

    return t_list_total, accel
def accel_S_curve(accel_input, t_total, t_accel, jerk_ratio):
    '''
    jerk ratio: https://product-help.schneider-electric.com/Machine%20Expert/V1.1/en/m241pto/m241pto/M241Lib-PTO-Configuration/M241Lib-PTO-Configuration-5.htm
    e.g., JerkRatio 66%: 2/3 of the acceleration and deceleration time is spent in increasing and decreasing the acceleration and deceleration value.

    Peak acceleration equations: https://docs.roboticsys.com/rmp/topics/motion/motion-concepts/s-curve-motion-profiles-command-acceleration-vs.-peak-acceleration

    More on S-curves: http://www.et.byu.edu/~ered/ME537/Notes/Ch5.pdf

    '''
    time_range = list(np.linspace(0, t_total, num=1000))
    t_list_total = []
    accel_list = []
    accel_max = accel_input/(1 - (jerk_ratio * 0.5))

    t_accel = t_accel
    t_accel_ratio = (t_accel * jerk_ratio) / 2 # time to do the increasing/decr portion

    for i in range(len(time_range)):
        t_current = time_range[i]

        # acceleration (+)
        if 0 <= t_current < t_accel:
            if 0 <= t_current < t_accel_ratio:
                if jerk_ratio != 0:
                    accel_current = (accel_max / t_accel_ratio) * t_current
                else:
                    accel_current = accel_max

            elif t_accel_ratio <= t_current < t_accel - t_accel_ratio:
                accel_current = accel_max

            else:
                t_current_calc = t_current - (t_accel - t_accel_ratio)
                if jerk_ratio != 0:
                    accel_current = -(accel_max / t_accel_ratio) * t_current_calc + accel_max
                else:
                    accel_current = 0

        # acceleration = 0
        elif t_accel <= t_current < t_total - t_accel:
            accel_current = 0

        # deceleration
        else:
            if t_total - t_accel <= t_current <  (t_total - t_accel) + t_accel_ratio:
                t_current_calc = t_current - (t_total - t_accel)
                if jerk_ratio != 0:
                    accel_current = -(accel_max / t_accel_ratio) * t_current_calc
                else:
                    accel_current = -accel_max

            elif (t_total - t_accel) + t_accel_ratio <= t_current < t_total - t_accel_ratio:
                accel_current = -accel_max

            else:
                t_current_calc = t_current - (t_total - t_accel_ratio)
                if jerk_ratio != 0:
                    accel_current = (accel_max / t_accel_ratio) * t_current_calc - accel_max
                else:
                    accel_current = 0
        accel_list.append(accel_current)
        t_list_total.append(t_current)

    return t_list_total, accel_list

## integration/derivation to find accel or velocity
def accel_deriv_All(time_data,vel_data):
    import numpy as np
    time_data_new = time_data
    accel_data = np.gradient(vel_data, time_data_new)
    accel_data = accel_data.tolist()

    if accel_data[0] != 0:
        time_data_new.insert(0, 0)
        time_data_new.append(time_data_new[-1])


        accel_data.insert(0, 0)
        accel_data.append(0)

    return time_data_new, accel_data
def velocity_integrate_All(time_data, accel_data):
    from numpy import trapz

    vel_current = 0
    vel_list = []
    time_list = []
    incr = 2
    for i in range(len(accel_data)-incr):
        start = i
        end = i + incr
        vel_current += trapz(accel_data[start:end], x = time_data[start:end], dx = incr)
        #vel_current +=simpson(accel_data[start:end], dx = incr)
        vel_list.append(vel_current)
        time_current = time_data[end]
        time_list.append(time_current)

    return time_list, vel_list

# Create Data
velocity_input = 20

accel_input = 600
jerk_ratio = 1/2

t_accel_linear = accel_time_linear(0, velocity_input, accel_input)[1]
t_accel_halfSine = accel_time_Half_Sine(velocity_input, accel_input)
t_accel_Scurve = accel_time_S_curve(jerk_ratio, velocity_input, accel_input)

t_total = float(t_accel_linear*3)

vel_LinearResult = velocity_linear(t_total, t_accel_linear, accel_input, velocity_input)
vel_HalfSineResult = velocity_halfSine(t_total, t_accel_halfSine, accel_input, velocity_input)
vel_SCurveResult = velocity_S_curve(t_total, t_accel_Scurve, accel_input, velocity_input, jerk_ratio)

accel_LinearResult = accel_linear(accel_input, t_total, t_accel_linear)
accel_HalfSineResult = accel_halfSine(accel_input, t_total, t_accel_halfSine)
accel_SCurveResult = accel_S_curve(accel_input, t_total, t_accel_Scurve, jerk_ratio)

pltListX = [vel_LinearResult[0], vel_HalfSineResult[0], vel_SCurveResult[0], accel_LinearResult[0], accel_HalfSineResult[0], accel_SCurveResult[0]]
pltListY = [vel_LinearResult[1], vel_HalfSineResult[1], vel_SCurveResult[1], accel_LinearResult[1], accel_HalfSineResult[1], accel_SCurveResult[1]]


t_total_update = 0
for i in range(len(pltListX)):
    if i == 0 or i == 3:
        extra = t_total/5
    else:
        extra = t_total/30
    for j in range(len(pltListX[i])):
        pltListX[i][j] += extra

    # pltListX[i].insert(0, 0)
    # pltListY[i].insert(0, 0)
    # pltListX[i].append(t_total + 2*extra)
    # pltListY[i].append(0)

t_prev = 0
for i in range(len(pltListX)):
    if i == 0 or i==3:
        t_prev = 0
    elif i > 0 or i > 3:
        t_prev = pltListX[i - 1][-1] + t_accel_linear

    for j in range(len(pltListX[i])):
        pltListX[i][j] += t_prev


### PLOT
color_interest_lines = 'gray'
width_interest_lines = 0.5
style_interest_lines = 'dashed'

### VELOCITY
fig_vel = plt.figure(figsize = (20,3))
###linear points of interest
plt.axvline(x = pltListX[0][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][0]+t_accel_linear, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][-1]-t_accel_linear, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][-1], color =color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)

###half sine
plt.axvline(x = pltListX[1][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][0]+t_accel_halfSine/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][0]+t_accel_halfSine, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1]-t_accel_halfSine, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1]-t_accel_halfSine/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)

###scurve
plt.axvline(x = pltListX[2][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0] + jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth =width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0] + jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0]+t_accel_Scurve - jerk_ratio*t_accel_Scurve/2 , color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0]+t_accel_Scurve, color = color_interest_lines, linewidth =width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-t_accel_Scurve, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-t_accel_Scurve+jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)



plt.plot(vel_LinearResult[0], vel_LinearResult[1],
         'k')
plt.plot(vel_HalfSineResult[0], vel_HalfSineResult[1],
         'k')
plt.plot(vel_SCurveResult[0], vel_SCurveResult[1],
         'k')

plt.xlim(left = 0)
plt.ylim(bottom = 0, top = velocity_input + 5)
plt.tick_params('both', direction = 'in', labelbottom = False, labelleft = False, size = 0)

plt.xlabel("Time", loc = 'right')
plt.ylabel("Velocity")


### ACCELERATION
fig_accel = plt.figure(figsize = (20,3))
x_axis = plt.axhline(y = 0, color = 'k', linewidth = 0.5, label = 'Time')

###linear points of interest
plt.axvline(x = pltListX[0][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][0]+t_accel_linear, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][-1]-t_accel_linear, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[0][-1], color =color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)

###half sine
plt.axvline(x = pltListX[1][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][0]+t_accel_halfSine/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][0]+t_accel_halfSine, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1]-t_accel_halfSine, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1]-t_accel_halfSine/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[1][-1], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)

###scurve
plt.axvline(x = pltListX[2][0], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0] + jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth =width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0] + jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0]+t_accel_Scurve - jerk_ratio*t_accel_Scurve/2 , color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][0]+t_accel_Scurve, color = color_interest_lines, linewidth =width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-t_accel_Scurve, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-t_accel_Scurve+jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1]-jerk_ratio*t_accel_Scurve/2, color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)
plt.axvline(x = pltListX[2][-1], color = color_interest_lines, linewidth = width_interest_lines, linestyle = style_interest_lines)


plt.plot(accel_LinearResult[0], accel_LinearResult[1],
         'k')
plt.plot(accel_HalfSineResult[0], accel_HalfSineResult[1],
         'k')
plt.plot(accel_SCurveResult[0], accel_SCurveResult[1],
         'k')

plt.xlim(left = 0)
plt.tick_params('both', direction = 'in', labelbottom = False, labelleft = False, size = 0)
plt.xlabel("Time", loc = 'right')
plt.ylabel("Acceleration")



plt.show()

